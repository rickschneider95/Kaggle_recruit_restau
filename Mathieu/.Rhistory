mutate( count=substr(visit_time, start = 1, stop = 3)) %>%
mutate(count=as.numeric(count)) %>%
filter(count == 4)
df %>% mutate(visit_time=as.character(visit_time)) %>%
mutate( count=substr(visit_time, start = 1, stop = 3)) %>%
mutate(count=as.numeric(count)) %>%
filter(count =< 4)
df %>% mutate(visit_time=as.character(visit_time)) %>%
mutate( count=substr(visit_time, start = 1, stop = 3)) %>%
mutate(count=as.numeric(count)) %>%
filter(count <= 4)
df %>% mutate(visit_time=as.character(visit_time)) %>%
mutate( count=substr(visit_time, start = 1, stop = 3)) %>%
mutate(count=as.numeric(count)) %>%
filter(count <= 4 & count >= 17)
df %>% mutate(visit_time=as.character(visit_time)) %>%
mutate( count=substr(visit_time, start = 1, stop = 3)) %>%
mutate(count=as.numeric(count)) %>%
filter(count <= 4 & count >= 17)
df %>% mutate(visit_time=as.character(visit_time)) %>%
mutate( count=substr(visit_time, start = 1, stop = 3)) %>%
mutate(count=as.numeric(count)) %>%
filter(count >= 4 & count <= 17)
df %>% mutate(visit_time=as.character(visit_time)) %>%
mutate( count=substr(visit_time, start = 1, stop = 3)) %>%
mutate(count=as.numeric(count)) %>%
filter(count >= 4 & count <= 17) %>%
mutate(visit_time=as.factor(visit_time))
df %>% mutate(visit_time=as.character(visit_time)) %>%
mutate( count=substr(visit_time, start = 1, stop = 3)) %>%
mutate(count=as.numeric(count)) %>%
filter(count >= 4 & count <= 17) %>%
mutate(visit_time=as.factor(visit_time)) %>%
select(-count)
library(RColorBrewer)
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(naniar)
library(VIM)
library('geosphere') # geospatial locations
library('leaflet') # maps
library('leaflet.extras') # maps
library('maps') # maps
hpg_store <- read_csv("data/hpg_store_info.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(naniar)
library(VIM)
library('geosphere') # geospatial locations
library('leaflet') # maps
library('leaflet.extras') # maps
library('maps') # maps
hpg_store <- read_csv("data/hpg_store_info.csv")
hpg_store
levels(as.factor(hpg_store$hpg_genre_name))
hpg_reserve <- read.csv("data/hpg_reserve.csv")
hpg_reserve %>%
select(hpg_store_id,reserve_visitors) # I'm only intersted in these two, so it will be easier to work with a smaller data set.
hpg_reserve %>% distinct(hpg_store_id) %>% summarise(count = n())
hpg_reserve <- hpg_reserve %>%
group_by(hpg_store_id) %>%
summarise(total = n())
hpg <- left_join(hpg_reserve,hpg_store, by = "hpg_store_id")
summary(aggr(hpg, sortVar=TRUE))$combinations
hpg <- hpg %>% filter(hpg_genre_name != "NA")
sum(is.na(hpg)) # Just to check...
visitors_per_style <- hpg %>%
group_by(hpg_genre_name) %>%
summarise(total = n()) %>%
arrange(total)
levels(as.factor(hpg$hpg_genre_name))
sum(hpg %>%
group_by(hpg_genre_name, hpg_area_name) %>%
summarise(total = n()) == 0)
hpg %>%
group_by(hpg_genre_name, hpg_area_name) %>%
summarise(total = n()) %>%
arrange(total) %>%
head()
visitors_per_style %>%
ggplot() +
aes(x = reorder(hpg_genre_name, total, FUN = min), y = total, fill = hpg_genre_name) +
geom_col() +
coord_flip() +
theme(title=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
levels(as.factor(hpg$hpg_area_name)) # There are 119 different area names in Japan considered in our dataset
hpg %>%
arrange(desc(total)) %>%
ggplot() +
aes(x = hpg_area_name, y = total, fill = hpg_genre_name) +
geom_col() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
hpg %>%
mutate(hpg_area_name = str_sub(hpg_area_name, 1, 20)) %>%
group_by(hpg_area_name) %>%
summarise(total = n()) %>%
ungroup() %>%
top_n(20,total) %>%
ggplot(aes(reorder(hpg_area_name, total, FUN = min), total, fill = hpg_area_name)) +
geom_col() +
coord_flip() +
labs(title = "Top 20 areas w/ most restaurants", x = "Areas", y = "Number of restaurants")
levels(as.factor(hpg_store_info$hpg_area_name)) # These are all the different areas in our data, although I'll group them according to the major city they are attached to.
leaflet(hpg) %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude,
popup = ~hpg_store_id, label = ~hpg_genre_name,
clusterOptions = markerClusterOptions())
View(hpg)
View(hpg)
library(leaflet)
library(leaflet)
library(leaflet)
leaflet(hpg) %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude,
popup = ~id, label = ~genre_name,
clusterOptions = markerClusterOptions())
leaflet(df) %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude,
popup = ~id, label = ~genre_name,
clusterOptions = markerClusterOptions())
library(leaflet)
leaflet(df %>% unique(id)) %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude,
popup = ~id, label = ~genre_name,
clusterOptions = markerClusterOptions())
df %>% unique(id)
df %>% distinct(id)
leaflet(df) %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude,
popup = ~id, label = ~genre_name,
clusterOptions = markerClusterOptions())
df %>% distinct(id,keep_all=TRUE)
df %>% distinct(id,keep_all = TRUE)
df %>% distinct(id, .keep_all = TRUE)
leaflet(df %>% distinct(id, .keep_all = TRUE)) %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude,
popup = ~id, label = ~genre_name,
clusterOptions = markerClusterOptions())
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
library(shiny); runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
names(df)
getColor <- function(rest) {
sapply(rest$genre_name, function(genre_name) {
if(genre_name == "Italian/French") {
"green"
} else if(genre_name == "Diner bar") {
"orange"
} else if(genre_name == "Izakaya"){
"blue"
} else if(genre_name == "Bar/Cocktail"){
"red"
}
else if(genre_name == "Asian"){
"darkgreen"
}
else{
"purple"
}
})
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(df)
)
library(leaflet)
getColor <- function(rest) {
sapply(rest$genre_name, function(genre_name) {
if(genre_name == "Italian/French") {
"green"
} else if(genre_name == "Diner bar") {
"orange"
} else if(genre_name == "Izakaya"){
"blue"
} else if(genre_name == "Bar/Cocktail"){
"red"
}
else if(genre_name == "Asian"){
"darkgreen"
}
else{
"purple"
}
})
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(df)
)
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
ui <- fluidPage(
mainPanel(
tabsetPanel(type='tabs',
tabPanel("time overview ",sidebarPanel("TITLE",
#selectInput("name","CHOICES ARE",choices=unique(prenoms$name),selected="Mathieu"),
#selectInput("color","Choose your favorite color bitch",choices=colors(),selected = "blue"),
#sliderInput( "year_period", "THE SLIDE YEAR SHOW", min = 1900, max = 2017, value =c(1900,2017), step = 1) ,
radioButtons("time", "WHICH TIME ARE U ON ?", choices=c("by day in the year"="visit_date",
"by_day_in_the_week"="day_of_the_week_visit",
"by hour"="visit_time",
"by holidays"="holiday_flg_visit")
),
conditionalPanel(condition = "input.time =='visit_date'",
dateRangeInput("daterange", "Date range:",
start = as.Date('2016-01-01'),
end = as.Date('2017-05-31')
)
),
conditionalPanel(condition = "input.time =='day_of_the_week_visit'",
checkboxGroupInput("day", "Select something else", choices = c('Monday',
'Tuesday',
'Wednesday',
'Thursday',
'Friday',
'Saturday',
'Sunday'),
selected=c('Monday',
'Tuesday',
'Wednesday',
'Thursday',
'Friday',
'Saturday',
'Sunday'))),
conditionalPanel(condition = "input.time =='visit_time'",
numericInput("hours1","between ",value=0, min =0, max =23, step = 1),
numericInput("hours2"," and ",value=23, min =0, max =23, step = 1)
),
actionButton("refresh",label = "Refresh")
),
mainPanel(
plotOutput("plot_time",width = "180%",length="120%"),
textOutput("number_visitors_period")
# DT::DTOutput("Table")
)
),
tabPanel("per restaurant",sidebarPanel("TITLE",
selectInput("id","Choose your favorite restaurant ",choices=unique(df$id)),
radioButtons("time2", "WHICH TIME ARE U ON ?", choices=c("by day in the year"="visit_date",
"by_day_in_the_week"="day_of_the_week_visit",
"by hour"="visit_time",
"by holidays"="holiday_flg_visit")
),
conditionalPanel(condition = "input.time2 =='visit_date'",
dateRangeInput("daterange2", "Date range:",
start = as.Date('2016-01-01'),
end = as.Date('2017-05-31')
)
),
conditionalPanel(condition = "input.time2 =='day_of_the_week_visit'",
checkboxGroupInput("day2", "Select something else", choices = c('Monday',
'Tuesday',
'Wednesday',
'Thursday',
'Friday',
'Saturday',
'Sunday'),
selected=c('Monday',
'Tuesday',
'Wednesday',
'Thursday',
'Friday',
'Saturday',
'Sunday'))),
conditionalPanel(condition = "input.time2 =='visit_time'",
numericInput("hours12","between ",value=0, min =0, max =23, step = 1),
numericInput("hours22"," and ",value=23, min =0, max =23, step = 1)
),
actionButton("refresh2",label = "Refresh bis")
),
mainPanel(
plotOutput("plot_time2"),
textOutput("number_visitors_period2")
# DT::DTOutput("Table")
)
),
tabPanel("Map",
mainPanel(
h5("Description of the map :\n\n"),
leafletOutput("map")
)
)
)
)
)
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
df %>%
mutate(visit_date=as.character(visit_date)) %>%
mutate(visit_month=substr(visit_date, start = 6, stop = 8)) %>%
mutate(visit_month =as.month(visit_month))
install.packages('epitool')
install.packages('epitools')
library(epitools)
df %>%
mutate(visit_date=as.character(visit_date)) %>%
mutate(visit_month=substr(visit_date, start = 6, stop = 8)) %>%
mutate(visit_month =as.month(visit_month))
df %>%
mutate(visit_date=as.character(visit_date)) %>%
mutate(visit_month=substr(visit_date, start = 6, stop = 8)) %>%
df %>%
mutate(visit_date=as.character(visit_date)) %>%
mutate(visit_month=substr(visit_date, start = 6, stop = 8))
df %>%
mutate(visit_date=as.character(visit_date)) %>%
mutate(visit_month=substr(visit_date, start = 6, stop = 8))
df %>%
mutate(visit_date=as.character(visit_date)) %>%
mutate(visit_month=substr(visit_date, start = 6, stop = 7))
df %>%
mutate(visit_date=as.character(visit_date)) %>%
mutate(visit_month=substr(visit_date, start = 6, stop = 7)) %>%
mutate(visit_month=as.numeric(visit_month)) %>%
mutate(visit_month =as.month(visit_month))
df %>%
mutate(visit_date=as.character(visit_date)) %>%
mutate(visit_month=substr(visit_date, start = 6, stop = 7)) %>%
mutate(visit_month=as.numeric(visit_month))
df %>%
mutate(visit_date=as.character(visit_date)) %>%
mutate(visit_month=substr(visit_date, start = 6, stop = 7)) %>%
mutate(visit_month=as.integer(visit_month))
df %>%
mutate(visit_date=as.character(visit_date)) %>%
mutate(visit_month=substr(visit_date, start = 6, stop = 7)) %>%
mutate(visit_month=as.integer(visit_month)) %>%
mutate(visit_month =as.month(visit_month))
df %>%
mutate(visit_month= months(as.Date(visit_date)))
df <- df %>%
mutate(visit_month= months(as.Date(visit_date)))
test <- unique(df$visit_month)
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
df %>% group_by(genre_name) %>% summarise(n())
df %>% group_by(genre_name) %>% summarise(n())
df1 <- read.csv("data/air_data.csv")
df2 <- read.csv("data/air_reserve.csv")
View(df2)
View(df2)
df2 <-df2 %>% separate(visit_datetime, into = c('visit_date', 'visit_time'), sep = 10) %>% separate(reserve_datetime, into = c('reserve_date', 'reserve_time'), sep = 10)
df2 <- df2 %>% rename(id=air_store_id)
df3 <- full_join(df1,df2,by='id')
view(df3)
View(df3)
df3 <- full_join(df1,df2,by=c('id','visit_date')
View(df3)
df3 <- full_join(df1,df2,by=c('id','visit_date'))
View(df3)
View(df)
View(df)
View(df3)
View(df3)
df3 <- df3 %>% select(-reserve_date,-reserve_time,-reserve_visitors)
write.csv(df3, file="data/air_data.csv", row.names = FALSE)
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
df3 %>% df3 %>% mutate(area_name = substr(area_name, 0, 8))
df3 <- df3 %>% mutate(area_name = substr(area_name, 0, 8))
write.csv(df3, file="data/air_data.csv", row.names = FALSE)
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
df1 <- read.csv("data/air_data.csv",encoding="UTF-8")
View(df1)
View(df1)
df1 <- read.csv("data/air_data.csv",encoding="UTF-8")
df2 <- read.csv("data/air_reserve.csv",encoding="UTF-8")
df2 <-df2 %>% separate(visit_datetime, into = c('visit_date', 'visit_time'), sep = 10) %>% separate(reserve_datetime, into = c('reserve_date', 'reserve_time'), sep = 10)
df2 <- df2 %>% rename(id=air_store_id)
df3 <- full_join(df1,df2,by=c('id','visit_date'))
df3 <- df3 %>% select(-reserve_date,-reserve_time,-reserve_visitors)
df3 <- df3 %>% mutate(area_name = substr(area_name, 0, 8))
write.csv(df3, file="data/air_data.csv", row.names = FALSE)
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
library(RColorBrewer)
general_overview <- function(df,time){
quo_time <- enquo(time)
str_time <- quo_name(quo_time)
df %>%
filter(!is.na(!!quo_time)) %>%
filter(!is.na(visitors)) %>%
group_by(!!quo_time) %>%
summarise(total=sum(visitors)) %>%
ggplot(aes_string(x =str_time, y = "total",fill=str_time))+
geom_bar(stat='identity')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),legend.position = "none")
}
general_overview(df,day_of_the_week_visit)
levels(df$day_of_the_week_visit)
df$day_of_the_week_visit <- sortLvls.fnc(df$day_of_the_week_reserve, c(2, 6, 7, 5, 1,3,4))
# Sort factor levels arbitrarily
sortLvls.fnc <- function(oldFactor, levelOrder) {
if(!is.factor(oldFactor)) stop("The variable you want to reorder isn't a factor.")
if(!is.numeric(levelOrder)) stop("'order' should be a numeric vector.")
if(max(levelOrder) > length(levels(oldFactor))) stop("The largest number in 'order' can't be larger than the number of levels in the factor.")
if(length(levelOrder) > length(levels(oldFactor))) stop("You can't have more elements in 'order' than there are levels in the factor.")
if(length(levelOrder) == length(levels(oldFactor))) {
reorderedFactor <- factor(oldFactor, levels = levels(oldFactor)[levelOrder])
}
if(length(levelOrder) < length(levels(oldFactor))) {
levelOrderAll <- c(levelOrder, (1:length(levels(oldFactor)))[-levelOrder])
reorderedFactor <- factor(oldFactor, levels = levels(oldFactor)[levelOrderAll])
}
return(reorderedFactor)
}
df$day_of_the_week_visit <- sortLvls.fnc(df$day_of_the_week_reserve, c(2, 6, 7, 5, 1,3,4))
levels(df3$factorAfter1)
levels(df$day_of_the_week_visit)
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
df <- read.csv("data/air_data.csv",encoding="UTF-8")
glimpse(df)
df$day_of_the_week_visit <- sortLvls.fnc(df$day_of_the_week_reserve, c(2, 6, 7, 5, 1,3,4))
df$day_of_the_week_visit <- sortLvls.fnc(df$day_of_the_week_visit, c(2, 6, 7, 5, 1,3,4))
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
df <- df %>%
mutate(visit_month= months(as.Date(visit_date)))
levels(df$visit_month)
df <- df %>%
mutate(visit_month= months(as.Date(visit_date)))
glimpse(df)
df <- df %>%
mutate(visit_month= months(as.Date(visit_date))) %>% mutate(visit_month=as.factor(visit_month))
glimpse(df)
levels(df$visit_month)
df$visit_month <- sortLvls.fnc(df$visit_month, c(5,4,9,2,8,7,6,1,12,11,10,3))
levels(df$visit_month)
runApp('~/GitHub/Kaggle_recruit_restau/shiny_app/template_app1.R')
