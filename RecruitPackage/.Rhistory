install.packages('Rtool')
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools()
install.packages('devtools')
install.packages("devtools")
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
# Set path of Rtools
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "*InstallDirectory*/Rtools/bin/",
"*InstallDirectory*/Rtools/mingw_64/bin", sep = ";")) #for 64 bit version
Sys.setenv(BINPREF = "*InstallDirectory*/Rtools/mingw_64/bin")
library(devtools)
#Manually "force" version to be accepted
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools() # is TRUE now
# Now you can install transformr then gganimate
devtools::install_github("thomasp85/transformr")
devtools::install_github("dgrtwo/gganimate")
usethis::use_vignette("comment-utiliser-mon-package")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(naniar)
library(VIM)
library('geosphere') # geospatial locations
library('leaflet') # maps
library('leaflet.extras') # maps
library('maps') # maps
hpg_store <- read_csv("data/hpg_store_info.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(naniar)
library(VIM)
library('geosphere') # geospatial locations
library('leaflet') # maps
library('leaflet.extras') # maps
library('maps') # maps
hpg_store <- read_csv("data/hpg_store_info.csv")
hpg_store
levels(as.factor(hpg_store$hpg_genre_name))
hpg_reserve <- read.csv("data/hpg_reserve.csv")
hpg_reserve %>%
select(hpg_store_id,reserve_visitors) # I'm only intersted in these two, so it will be easier to work with a smaller data set.
hpg_reserve %>% distinct(hpg_store_id) %>% summarise(count = n())
hpg_reserve <- hpg_reserve %>%
group_by(hpg_store_id) %>%
summarise(total = n())
hpg <- left_join(hpg_reserve,hpg_store, by = "hpg_store_id")
summary(aggr(hpg, sortVar=TRUE))$combinations
hpg <- hpg %>% filter(hpg_genre_name != "NA")
sum(is.na(hpg)) # Just to check...
visitors_per_style <- hpg %>%
group_by(hpg_genre_name) %>%
summarise(total = n()) %>%
arrange(total)
levels(as.factor(hpg$hpg_genre_name))
sum(hpg %>%
group_by(hpg_genre_name, hpg_area_name) %>%
summarise(total = n()) == 0)
hpg %>%
group_by(hpg_genre_name, hpg_area_name) %>%
summarise(total = n()) %>%
arrange(total) %>%
head()
visitors_per_style %>%
ggplot() +
aes(x = reorder(hpg_genre_name, total, FUN = min), y = total, fill = hpg_genre_name) +
geom_col() +
coord_flip() +
theme(title=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")
levels(as.factor(hpg$hpg_area_name)) # There are 119 different area names in Japan considered in our dataset
hpg %>%
arrange(desc(total)) %>%
ggplot() +
aes(x = hpg_area_name, y = total, fill = hpg_genre_name) +
geom_col() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
hpg %>%
mutate(hpg_area_name = str_sub(hpg_area_name, 1, 20)) %>%
group_by(hpg_area_name) %>%
summarise(total = n()) %>%
ungroup() %>%
top_n(20,total) %>%
ggplot(aes(reorder(hpg_area_name, total, FUN = min), total, fill = hpg_area_name)) +
geom_col() +
coord_flip() +
labs(title = "Top 20 areas w/ most restaurants", x = "Areas", y = "Number of restaurants")
levels(as.factor(hpg_store_info$hpg_area_name)) # These are all the different areas in our data, although I'll group them according to the major city they are attached to.
hpg_reserve <- read.csv("data/hpg_reserve.csv")
hpg_reserve %>%
select(hpg_store_id,reserve_visitors) # I'm only intersted in these two, so it will be easier to work with a smaller data set.
View(hpg_store)
View(hpg_store)
levels(as.factor(hpg_store_info$hpg_area_name)) # These are all the different areas in our data, although I'll group them according to the major city they are attached to.
levels(as.factor(hpg_store$hpg_area_name)) # These are all the different areas in our data, although I'll group them according to the major city they are attached to.
hpg <- hpg %>%
mutate(hpg_area_name = case_when(hpg_area_name == "Osaka Prefecture Osaka None" ~ "ÅŒsaka-fu Prefecture Osaka None",
TRUE ~ hpg_area_name))
#We needed to make this slight modification sicne one of the osaka areas was wirtten without the same character as the others.
hpg %>%
mutate(hpg_area_name = substr(hpg_area_name, 0, 8)) %>%
group_by(hpg_area_name) %>%
summarise(total = n()) %>%
ggplot(aes(reorder(hpg_area_name, total, FUN = min), total, fill = hpg_area_name)) +
geom_col() +
coord_flip() +
labs(title = "Most influential areas", x = "Areas", y = "Number of restaurants")
leaflet(hpg) %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude,
popup = ~hpg_store_id, label = ~hpg_genre_name,
clusterOptions = markerClusterOptions())
hpg %>%
mutate(hpg_area_name = str_sub(hpg_area_name, 0, 8)) %>%
ggplot(aes(hpg_area_name, hpg_genre_name)) +
geom_count(colour = "blue") +
theme(legend.position = "bottom", axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9)) +
labs(y = "Genre", x = "Area", title = "Contingency table")
test <- hpg_store
med_coord_hpg <- hpg %>%
summarise_at(vars(longitude:latitude), median) # calculating median distance of all areas. (sort of center of japan)
hpg_coords <- hpg %>%
select(longitude, latitude) # just selecting coordinates
test$dist <- distCosine(hpg_coords, med_coord_hpg)/1e3 # creating a new column with distance btw each area and "center" of japan
test_count <- hpg_store %>%
group_by(hpg_area_name) %>%
summarise(hpg_count = n())
test <- test %>%
mutate(dist_group = as.integer(case_when(dist < 80 ~ 1, dist < 300 ~ 2, dist < 500 ~ 3, dist < 750 ~ 4, TRUE ~ 5))) %>%
left_join(test_count, by = "hpg_area_name") %>%
separate(hpg_area_name, c("prefecture"), sep = " ", remove = FALSE) # Seperating areas in function of their distance to "center"
test %>%
ggplot(aes(dist)) +
geom_histogram(bins = 30, fill = "red") +
geom_vline(xintercept = c(80, 300, 500, 750)) +
labs(x = "Linear distance [km]")
bar <- test %>%
select(latitude, longitude, dist_group) %>%
mutate(dset = "hpg")
leaflet(bar) %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addScaleBar() %>%
addCircleMarkers(lng = bar$longitude, lat = bar$latitude, group = "HPG",
color = "red", fillOpacity = 0.5, radius = 3*bar$dist_group) %>%
addCircleMarkers(lng = med_coord_hpg$longitude, lat = med_coord_hpg$latitude, group = "Centre",
color = "darkgreen", fillOpacity = 1) %>%
addLayersControl(
overlayGroups = c("HPG", "Centre"),
options = layersControlOptions(collapsed = FALSE)
)
rm(list=ls())
library(dplyr)
library(tidyr)
library(dplyr)
library(tidyr)
air_reserve <- read.csv("data/air_reserve.csv")                   #check
air_store_info <- read.csv("data/air_store_info.csv")             #check
air_visit_data <- read.csv("data/air_visit_data.csv")
data_info <- read.csv("data/date_info.csv")                       #check
hpg_reserve <- read.csv("data/hpg_reserve.csv")                   #check
hpg_store_info <- read.csv("data/hpg_store_info.csv")             #check
store_id_relation <- read.csv("data/store_id_relation.csv")       #check
sample_submission <- read.csv("data/sample_submission.csv")
glimpse(air_reserve)
glimpse(hpg_reserve)
glimpse(store_id_relation)
glimpse(sample_submission)
#rename to id:
air_reserve <- air_reserve %>% rename(id = air_store_id)
hpg_reserve <- hpg_reserve %>% rename(id = hpg_store_id)
#paste them together:
reserve <- rbind(air_reserve, hpg_reserve)
glimpse(air_store_info)
glimpse(hpg_store_info)
#rename to id:
air_store_info <- air_store_info %>%
rename(id = air_store_id,
genre_name = air_genre_name,
area_name = air_area_name)
hpg_store_info <- hpg_store_info %>%
rename(id = hpg_store_id,
genre_name = hpg_genre_name,
area_name = hpg_area_name)
#paste them together:
info <- rbind(air_store_info, hpg_store_info)
final <- full_join(reserve,info,by="id")
View(final)
glimpse(final)
glimpse(data_info)
data_info <- data_info %>%
rename(visit_date= calendar_date)
final <-final %>%
separate(visit_datetime, into = c('visit_date', 'visit_time'), sep = 10) %>%
separate(reserve_datetime, into = c('reserve_date', 'reserve_time'), sep = 10)
#join
final <- full_join(final,data_info,by="visit_date")
#rename
final <- final %>%
rename(day_of_the_week_visit = day_of_week,
holiday_flg_visit = holiday_flg)
#for reserve:
data_info <- data_info %>%
rename(reserve_date= visit_date)
final <- full_join(final,data_info,by="reserve_date")
#rename
final <- final %>%
rename(day_of_the_week_reserve= day_of_week,
holiday_flg_reserve = holiday_flg)
#View(final)
glimpse(air_visit_data)
air_visit_data <- air_visit_data %>%
rename(id = air_store_id)
glimpse(final)
final2 <- full_join(final,air_visit_data,by=c("id","visit_date"))
glimpse(final2)
store_id_relation <- store_id_relation  %>%
rename(id = hpg_store_id)
final3 <- full_join(final2, store_id_relation, by= "id")
ind <- !is.na(final3[,"air_store_id"])
final3[ind,"id"] <- as.character(final3[ind,"air_store_id"])
final3 <- final3[,-16]
glimpse(final3)
final3
write.csv(final3, file="data/complete_data.csv", row.names = FALSE) #run only once and check it's in your data folder
final_data <- read.csv("data/complete_data.csv")
final_data
